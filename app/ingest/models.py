# This file was auto-generated by the framework. You can add data models or change the existing ones

from moose_lib import Key, IngestPipeline, IngestPipelineConfig
from datetime import datetime, date, UTC
from typing import Optional, List
from pydantic import BaseModel, Field
from enum import Enum


class SetType(str, Enum):
    SET_1 = "Set 1"
    SET_2 = "Set 2" 
    SET_3 = "Set 3"
    ONE_SET = "One Set"
    ENCORE = "Encore"
    SOUNDCHECK = "Soundcheck"
    OTHER = "Other"


class Show(BaseModel):
    """A concert/show with metadata"""
    primary_key: Key[str] = Field(..., description="Unique identifier for the show (e.g., 'goose-2025-01-15-venue')")
    band_name: str = Field(..., description="Name of the performing band")
    show_date: str = Field(..., description="Date of the show (YYYY-MM-DD format)")
    venue_name: str = Field(..., description="Name of the venue")
    venue_city: Optional[str] = Field(None, description="City where venue is located")
    venue_state: Optional[str] = Field(None, description="State/province where venue is located") 
    venue_country: Optional[str] = Field(None, description="Country where venue is located")
    tour_name: Optional[str] = Field(None, description="Name of the tour if applicable")
    show_notes: Optional[str] = Field(None, description="Any notes about the show")
    verified: bool = Field(False, description="Whether the setlist has been verified")
    source_url: Optional[str] = Field(None, description="URL where setlist data was sourced from")
    created_at: str = Field(default_factory=lambda: datetime.now(UTC).isoformat())


class SetlistEntry(BaseModel):
    """Individual song performance within a show"""
    primary_key: Key[str] = Field(..., description="Unique identifier (show_id + set + position)")
    show_id: str = Field(..., description="Reference to the Show this entry belongs to")
    band_name: str = Field(..., description="Name of the performing band")
    show_date: str = Field(..., description="Date of the show (denormalized for easier querying, YYYY-MM-DD format)")
    set_type: SetType = Field(..., description="Which set this song was played in")
    set_position: int = Field(..., description="Position within the set (1, 2, 3, etc.)")
    song_name: str = Field(..., description="Name of the song")
    song_duration_minutes: Optional[float] = Field(None, description="Duration of the song in minutes")
    transitions_into: Optional[str] = Field(None, description="Song this transitions into (for > symbols)")
    transitions_from: Optional[str] = Field(None, description="Song this transitions from") 
    is_jam: bool = Field(False, description="Whether this was noted as a jam version")
    is_tease: bool = Field(False, description="Whether this was a tease of the song")
    is_partial: bool = Field(False, description="Whether this was a partial/incomplete version")
    performance_notes: Optional[str] = Field(None, description="Notes about this specific performance")
    guest_musicians: Optional[List[str]] = Field(None, description="Any guest musicians for this song")
    created_at: str = Field(default_factory=lambda: datetime.now(UTC).isoformat())


# Create ingest pipelines for both models
show_pipeline = IngestPipeline[Show]("Show", IngestPipelineConfig(
    ingest=True,   # API endpoint for ingesting show data
    stream=True,   # Stream processing capabilities
    table=True     # Store in ClickHouse for analytics
))

setlist_entry_pipeline = IngestPipeline[SetlistEntry]("SetlistEntry", IngestPipelineConfig(
    ingest=True,   # API endpoint for ingesting individual song performances
    stream=True,   # Stream processing capabilities  
    table=True     # Store in ClickHouse for analytics
))
